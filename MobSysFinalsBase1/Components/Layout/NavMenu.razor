@inject NavigationManager Nav
@inject AppShellContext AppShell

@if (!HideNavMenu)
{
    <nav class="tachiyomi-bottom-nav shadow-lg">
        @if (AppShell.IsUserLoggedIn)
        {
            <button class="tachiyomi-nav-btn @(ActiveTab == "browse" ? "active" : "")" title="Browse" @onclick="@(() => NavigateAndClose(""))">
                <i class="fas fa-compass"></i>
                <span>Browse</span>
            </button>
            <button class="tachiyomi-nav-btn @(ActiveTab == "books" ? "active" : "")" title="Books" @onclick="@(() => NavigateAndClose("books"))">
                <i class="fas fa-book"></i>
                <span>Books</span>
            </button>
            <button class="tachiyomi-nav-btn @(ActiveTab == "favourites" ? "active" : "")" title="Favourites" @onclick="@(() => NavigateAndClose("favourites"))">
                <i class="fas fa-star"></i>
                <span>Favourites</span>
            </button>
            <button class="tachiyomi-nav-btn" title="Logout" @onclick="Logout">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </button>
        }
        else
        {
            <button class="tachiyomi-nav-btn @(ActiveTab == "register" ? "active" : "")" title="Register" @onclick="@(() => NavigateAndClose("register"))">
                <i class="fas fa-user-plus"></i>
                <span>Register</span>
            </button>
            <button class="tachiyomi-nav-btn @(ActiveTab == "login" ? "active" : "")" title="Login" @onclick="@(() => NavigateAndClose("login"))">
                <i class="fas fa-sign-in-alt"></i>
                <span>Login</span>
            </button>
        }
    </nav>
}

@code {
    private string ActiveTab = "browse";

    protected override void OnInitialized()
    {
        AppShell.OnChange += StateHasChanged;
        Nav.LocationChanged += OnLocationChanged;
        SetActiveTab();
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        SetActiveTab();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppShell.OnChange -= StateHasChanged;
        Nav.LocationChanged -= OnLocationChanged;
    }

    public async Task Logout()
    {
        AppShell.ClearSessionUser();
        AppShell.CurrentUser = null;
        AppShell.IsUserLoggedIn = false;
        await InvokeAsync(StateHasChanged);
        Nav.NavigateTo($"/login");
    }

    private void NavigateAndClose(string path)
    {
        if (string.IsNullOrEmpty(path))
            Nav.NavigateTo("/");
        else
            Nav.NavigateTo(path);
    }

    private bool HideNavMenu =>
        Nav.ToBaseRelativePath(Nav.Uri).Trim('/').Equals("login", StringComparison.OrdinalIgnoreCase) ||
        Nav.ToBaseRelativePath(Nav.Uri).Trim('/').Equals("register", StringComparison.OrdinalIgnoreCase);

    private void SetActiveTab()
    {
        var uri = Nav.ToBaseRelativePath(Nav.Uri).Trim('/').ToLowerInvariant();
        ActiveTab = uri switch
        {
            "" => "browse",
            "books" => "books",
            "favourites" => "favourites",
            "register" => "register",
            "login" => "login",
            _ => ""
        };
    }
}